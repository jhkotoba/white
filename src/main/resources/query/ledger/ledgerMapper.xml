<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="ledgerMapper">

	<!-- 해당 유저 목적 리스트 조회 -->
	<select id="selectPurList" resultType="whiteMap" parameterType="whiteMap">
		/* ledgerMapper|selectPurList */
		SELECT	
			PURPOSE_SEQ AS purposeSeq,
	  		PURPOSE_ODR AS purposeOdr,
	 		PURPOSE_NM AS purposeNm,
	 		PURPOSE_TP_CD AS purposeTpCd
		FROM PURPOSE
		WHERE USER_SEQ = #{userSeq}
		ORDER BY PURPOSE_ODR
	</select>
	
	<!-- 해당 유저 상세목적 리스트 조회 -->
	<select id="selectPurDtlList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			PURPOSE_DTL_SEQ AS purposeDtlSeq,
			PURPOSE_SEQ AS purposeSeq,
			PURPOSE_DTL_ODR AS purposeDtlOdr,
			PURPOSE_DTL_NM AS purposeDtlNm
		FROM PURPOSE_DTL
		WHERE USER_SEQ = #{userSeq}
		ORDER BY PURPOSE_DTL_ODR	
	</select>
	
	<!-- 해당 유저 목적 반영하기전 목적 시퀀스 검증 -->
	<select id="selectVerifyPurSeqStrList" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1)	FROM PURPOSE
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND PURPOSE_SEQ IN (${verifyPurSeqList})
	</select>
	
	<!-- 거래내역에 목적이 사용되는지 확인 -->
	<select id="selectIsUsedPurposeRec" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM LEDGER_RCD
		WHERE PURPOSE_SEQ IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeSeq}
		</foreach>
	</select>
	
	<!-- 목적 삭제시 상세목적에 부모로써 사용되는지 확인 -->
	<select id="selectIsUsedPurposePurDtl" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM PURPOSE_DTL
		WHERE PURPOSE_SEQ IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeSeq}
		</foreach>
	</select>
	
	<!-- 목적 list 삭제 -->
	<delete id="deletePurList" parameterType="java.util.List">
		DELETE FROM PURPOSE
		WHERE PURPOSE_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeSeq}
		</foreach>
	</delete>
	
	<!-- 목적 리스트 insert -->
	<insert id="insertPurList" parameterType="java.util.List">
		INSERT INTO PURPOSE(		
			USER_SEQ,	
			PURPOSE_ODR,
			PURPOSE_NM,
			PURPOSE_TP_CD
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.userSeq},
			#{item.purposeOdr},
			#{item.purposeNm},
			#{item.purposeTpCd}
		</foreach>	
	</insert>
	
	<!-- 목적 list 수정 -->
	<update id="updatePurList" parameterType="java.util.List">		
		UPDATE PURPOSE
		SET PURPOSE_ODR = 
		CASE		
		<foreach collection="list" item="item">
			WHEN PURPOSE_SEQ = #{item.purposeSeq} THEN #{item.purposeOdr}
		</foreach>		
		END,	
		PURPOSE_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN PURPOSE_SEQ = #{item.purposeSeq} THEN #{item.purposeNm}
		</foreach>		
		END,
		PURPOSE_TP_CD = 
		CASE		
		<foreach collection="list" item="item">
			WHEN PURPOSE_SEQ = #{item.purposeSeq} THEN #{item.purposeTpCd}
		</foreach>		
		END
		WHERE PURPOSE_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeSeq}
		</foreach>		
	</update>
	
	
	<!-- 해당 유저 상세목적 반영하기전 상세목적 시퀀스 검증 -->
	<select id="selectVerifyPurDtlSeqStrList" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1)	FROM PURPOSE_DTL
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND PURPOSE_DTL_SEQ IN (${verifyPurDtlSeqList})
	</select>
	
	<!-- 해당 유저 상세목적반영하기전 목적 시퀀스 검증 -->
	<select id="selectVerifyPurSeq" resultType="int" parameterType="whiteMap">
		SELECT COUNT(1) FROM PURPOSE
		WHERE USER_SEQ = #{userSeq}
		AND PURPOSE_SEQ = #{purposeSeq}
	</select>
	
	<!-- 거래내역에 상세목적이 사용되는지 확인 -->
	<select id="selectIsUsedPurDtlRec" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM LEDGER_RCD
		WHERE PURPOSE_DTL_SEQ IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeDtlSeq}
		</foreach>
	</select>
	
	<!-- 상세목적 list 삭제 -->
	<delete id="deletePurDtlList" parameterType="java.util.List">
		DELETE FROM PURPOSE_DTL
		WHERE PURPOSE_DTL_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeDtlSeq}
		</foreach>
	</delete>
	
	<!-- 상세목적 list 수정 -->
	<update id="updatePurDtlList" parameterType="java.util.List">		
		UPDATE PURPOSE_DTL
		SET	PURPOSE_DTL_ODR = 
		CASE		
		<foreach collection="list" item="item">
			WHEN PURPOSE_DTL_SEQ = #{item.purposeDtlSeq} THEN #{item.purposeDtlOdr}
		</foreach>		
		END,	
		PURPOSE_DTL_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN PURPOSE_DTL_SEQ = #{item.purposeDtlSeq} THEN #{item.purposeDtlNm}
		</foreach>		
		END
		WHERE PURPOSE_DTL_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purposeDtlSeq}
		</foreach>
	</update>
	
	<!-- 상세목적 리스트 insert -->
	<insert id="insertPurDtlList" parameterType="java.util.List">
		INSERT INTO PURPOSE_DTL(		
			PURPOSE_SEQ,	
			USER_SEQ,	
			PURPOSE_DTL_ODR,
			PURPOSE_DTL_NM
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.purposeSeq}, 
			#{item.userSeq}, 
			#{item.purposeDtlOdr},
			#{item.purposeDtlNm}
		</foreach>	
	</insert>
	
	<!-- 은행 조회 -->
	<select id="selectMeansList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			MEANS_SEQ AS meansSeq,
			MEANS_NM AS meansNm,
			MEANS_DTL_NM AS meansDtlNm,
			MEANS_INFO AS meansInfo,
			MEANS_USE_YN AS meansUseYn,
			MEANS_ODR AS meansOdr,
			MEANS_RMK AS meansRmk
		FROM MEANS
		WHERE USER_SEQ = #{userSeq}		
		ORDER BY MEANS_ODR ASC
	</select>
	
	<!-- 해당 유저 은행 반영하기전 상세목적 시퀀스 검증 -->
	<select id="selectVerifyMeansSeqStrList" resultType="int" parameterType="java.util.List">
		/* ledgerMapper|selectVerifyMeansSeqStrList */
		SELECT COUNT(1)	FROM MEANS
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND MEANS_SEQ IN (${verifyMeansSeqList})
	</select>
	
	<!-- 사용목적 사용되는지 확인 -->
	<select id="selectIsUsedMeansRec" resultType="int" parameterType="java.util.List">
		/* ledgerMapper|selectIsUsedMeansRec */
		SELECT COUNT(1) FROM LEDGER_RCD
		WHERE MEANS_SEQ IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</select>
	
	<!-- 사용목적 리스트 insert -->
	<insert id="insertMeansList" parameterType="java.util.List">
		/* ledgerMapper|insertMeansList */
		INSERT INTO MEANS(		
			USER_SEQ,
			MEANS_NM,
			MEANS_DTL_NM,
			MEANS_INFO,
			MEANS_USE_YN,
			MEANS_ODR,
			MEANS_RMK
		)VALUES
		<foreach collection="list" item="item" index="index" separator="),(" open="(" close=")">
			#{item.userSeq},
			#{item.meansNm},
			#{item.meansDtlNm},
			#{item.meansInfo},
			#{item.meansUseYn},
			(SELECT MAX(B.MEANS_ODR)+1 FROM MEANS B WHERE B.USER_SEQ = #{item.userSeq}),			
			#{item.meansRmk}	
		</foreach>	
	</insert>
	
	<!-- 사용수단 list 수정 -->
	<update id="updateMeansList" parameterType="java.util.List">		
		UPDATE MEANS
		SET MEANS_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansNm}
		</foreach>		
		END,
		MEANS_DTL_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansDtlNm}
		</foreach>		
		END,
		MEANS_INFO = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansInfo}
		</foreach>		
		END,
		MEANS_USE_YN = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansUseYn}
		</foreach>
		END,
		MEANS_ODR = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansOdr}
		</foreach>
		END,
		MEANS_RMK = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansRmk}
		</foreach>
		END
		WHERE MEANS_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</update>
	
	<!-- 사용수단 list 삭제 -->
	<delete id="deleteMeansList" parameterType="java.util.List">
		DELETE FROM MEANS
		WHERE MEANS_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</delete>
	
	<!-- 가게부 기입 list insert -->
	<insert id="insertRecordList" parameterType="java.util.List">
		INSERT INTO LEDGER_RCD(		
			USER_SEQ,	
			RECORD_DATE,
			POSITION,	
			CONTENT,	
			PURPOSE_SEQ,
			PURPOSE_DTL_SEQ,
			MEANS_SEQ,
			MOVE_SEQ,
			MONEY,
			STATS_YN,
			EDIT_DATE,
			REG_DATE
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.userSeq}, 
			#{item.recordDate},
			#{item.position},
			#{item.content}, 
			#{item.purposeSeq},	
			#{item.purposeDtlSeq},
			#{item.meansSeq}, 
			#{item.moveSeq},						 
			#{item.money},	
			#{item.statsYn},
			now(),	
			now()
		</foreach>	
	</insert>	
	
	<!-- 금전기록 해당날짜 이전 각각(현금, 은행등등) 금액 합산 조회 -->
	<select id="selectPastCalLedger" resultType="whiteMap" parameterType="java.util.List">
		SELECT
		<foreach collection="list" item="item" separator=",">
			(
			  SELECT 
			    IFNULL(
				    SUM( 
				      CASE
				      WHEN MEANS_SEQ = #{item.meansSeq} THEN money
				      WHEN MOVE_SEQ = #{item.meansSeq} THEN ABS(money)
				      END
				    )
				  ,0)
			  FROM LEDGER_RCD
			  WHERE USER_SEQ = #{item.userSeq} 
			  AND RECORD_DATE <![CDATA[ < ]]>  #{item.startDate}
			)AS ${item.meansNo}	
		</foreach>		
	</select>
	
	<!-- 가계부 리스트 조회  -->
	<select id="selectLedgerList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			LR.LEDGER_RCD_SEQ AS ledgerRcdSeq
			,DATE_FORMAT(LR.RECORD_DATE,'%Y-%m-%d %H:%i') AS recordDate
			,IFNULL(LR.POSITION, '') AS position
			,LR.CONTENT	AS content
			,LR.PURPOSE_SEQ AS purposeSeq
			,P.PURPOSE_TP_CD AS purposeTpCd
			,LR.PURPOSE_DTL_SEQ AS purposeDtlSeq
			,LR.MEANS_SEQ AS meansSeq
			,LR.MOVE_SEQ AS moveSeq
			,LR.MONEY	AS money
			,LR.STATS_YN AS statsYn
			,P.PURPOSE_NM	AS purposeNm
			,PD.PURPOSE_DTL_NM AS purposeDtlNm
			,M.MEANS_NM	AS meansNm
			,M.MEANS_DTL_NM	AS meansDtlNm
			,M.MEANS_INFO AS meansInfo
			,IFNULL(M.MEANS_USE_YN,'X') AS meansUseYn
		FROM LEDGER_RCD LR
		LEFT OUTER JOIN PURPOSE P
		ON LR.PURPOSE_SEQ = P.PURPOSE_SEQ
		LEFT OUTER JOIN PURPOSE_DTL PD
		ON LR.PURPOSE_DTL_SEQ = PD.PURPOSE_DTL_SEQ
		LEFT OUTER JOIN MEANS M
    	ON LR.MEANS_SEQ = M.MEANS_SEQ
		WHERE LR.USER_SEQ = #{userSeq}
		<if test="purposeSeq != null and purposeSeq != ''">
		AND LR.PURPOSE_SEQ = #{purposeSeq}
		</if>
		<if test="purposeDtlSeq != null and purposeDtlSeq != ''">
		AND LR.PURPOSE_DTL_SEQ = #{purposeDtlSeq}
		</if>
		<if test="meansSeq != null and meansSeq != ''">
		AND LR.MEANS_SEQ = #{meansSeq}
		</if>		
		AND LR.RECORD_DATE <![CDATA[ >= ]]> CONCAT(#{startDate}, ' 00:00:00')
		AND LR.RECORD_DATE <![CDATA[ <= ]]> CONCAT(#{endDate}, ' 23:59:59')
		ORDER BY LR.RECORD_DATE ASC,  LR.LEDGER_RCD_SEQ ASC
	</select>
	
	
	<!-- 금전기록 해당날짜 이전 각각(현금, 은행등등) 금액 합산 조회 -->
	<select id="selectPastCalLedgerOLD" resultType="whiteMap" parameterType="java.util.List">
		SELECT
		<foreach collection="list" item="item" separator=",">
			(
			  SELECT 
			    IFNULL(
				    SUM( 
				      CASE
				      WHEN MEANS_SEQ = #{item.meansSeq} THEN money
				      WHEN MOVE_SEQ = #{item.meansSeq} THEN ABS(money)
				      END
				    )
				  ,0)
			  FROM LEDGER_RCD
			  WHERE USER_SEQ = #{item.userSeq} 
			  AND RECORD_DATE <![CDATA[ < ]]>  #{item.startDate}
			)AS ${item.meansNm}	
		</foreach>		
	</select>	
	
	<!-- 금전기록 리스트 조회  -->
	<select id="selectRecordList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			LR.LEDGER_RCD_SEQ AS ledgerRcdSeq
			,DATE_FORMAT(LR.RECORD_DATE,'%Y-%m-%d %H:%i') AS recordDate
			,IFNULL(LR.POSITION, '') AS position
			,LR.CONTENT	AS content
			,LR.PURPOSE_SEQ AS purposeSeq
			,P.PURPOSE_TP_CD AS purposeTpCd
			,IFNULL(LR.PURPOSE_DTL_SEQ, '') AS purposeDtlSeq
			,LR.MEANS_SEQ AS meansSeq
			,IFNULL(LR.MOVE_SEQ, '') AS moveSeq
			,LR.MONEY AS money
			,LR.STATS_YN AS statsYn
			,IFNULL(P.PURPOSE_NM, 'move')	AS purposeNm
			,IFNULL(PD.PURPOSE_DTL_NM,'') AS purposeDtlNm
			,IFNULL(M.MEANS_NM, 'cash')	AS meansNm
			,IFNULL(M.MEANS_INFO, 'cash')	AS meansInfo
			,IFNULL(M.MEANS_USE_YN,'X') AS meansUseYn
			<if test="searchType == 'recent'">
			,DATE_FORMAT(LR.EDIT_DATE,'%Y-%m-%d %H:%i:%d') AS editDate
			,DATE_FORMAT(LR.REG_DATE,'%Y-%m-%d %H:%i:%d') AS regDate
			</if>
		FROM LEDGER_RCD LR
		LEFT OUTER JOIN PURPOSE P
		ON LR.PURPOSE_SEQ = P.PURPOSE_SEQ
		LEFT OUTER JOIN PURPOSE_DTL PD
		ON LR.PURPOSE_DTL_SEQ = PD.PURPOSE_DTL_SEQ
		LEFT OUTER JOIN MEANS M
    	ON LR.MEANS_SEQ = M.MEANS_SEQ
		WHERE LR.USER_SEQ = #{userSeq}
		<choose>
		<when test="searchType == 'recent'">
		AND LR.REG_DATE <![CDATA[ >= ]]> DATE_ADD(NOW(), INTERVAL -${schdTime} HOUR)
		AND LR.REG_DATE <![CDATA[ <= ]]> NOW()
		ORDER BY LR.EDIT_DATE DESC,  LR.LEDGER_RCD_SEQ DESC
		</when>
		<otherwise>
		AND LR.RECORD_DATE <![CDATA[ >= ]]> #{startDate}
		AND LR.RECORD_DATE <![CDATA[ <= ]]> #{endDate}
		ORDER BY LR.RECORD_DATE ASC,  LR.LEDGER_RCD_SEQ ASC
		</otherwise>
		</choose>
	</select>
	
	<!-- 금전기록 list 수정 -->
	<update id="updateRecordList" parameterType="java.util.List">		
		UPDATE LEDGER_RCD
		SET RECORD_DATE = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.recordDate}
		</foreach>		
		END,	
		CONTENT = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.content}
		</foreach>		
		END,	
		POSITION = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.position}
		</foreach>		
		END,		
		PURPOSE_SEQ = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.purposeSeq}
		</foreach>		
		END,		
		PURPOSE_DTL_SEQ = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.purposeDtlSeq}		
		</foreach>		
		END,
		MEANS_SEQ = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.meansSeq}					
		</foreach>		
		END,		
		MOVE_SEQ = 
		CASE		
		<foreach collection="list" item="item">
			<choose>				
				<when test="item.moveSeq == ''">
					WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN NULL
				</when>				
				<otherwise>
					WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.moveSeq}
				</otherwise>
			</choose>			
		</foreach>		
		END,		
		MONEY = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.money}
		</foreach>		
		END,
		STATS_YN = 
		CASE		
		<foreach collection="list" item="item">
			WHEN LEDGER_RCD_SEQ = #{item.ledgerRcdSeq} THEN #{item.statsYn}
		</foreach>		
		END,
		EDIT_DATE =	now()
		WHERE LEDGER_RCD_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.ledgerRcdSeq}
		</foreach>
		AND USER_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.userSeq}
		</foreach>
	</update>
	
	<!-- 금전기록 list 삭제 -->
	<delete id="deleteRecordList" parameterType="java.util.List">
		DELETE FROM LEDGER_RCD
		WHERE LEDGER_RCD_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.ledgerRcdSeq}
		</foreach>
		AND USER_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.userSeq}
		</foreach>
	</delete>
	
	<!-- 가계부 첫 시작날짜 조회 -->
	<select id="selectFirstRecordDate" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			DATE_FORMAT(LR.RECORD_DATE,'%Y-%m-%d') AS firstDate
		FROM LEDGER_RCD LR		
		WHERE LR.USER_SEQ = #{userSeq}
	    ORDER BY LR.RECORD_DATE ASC
	    Limit 1
	</select>	
	
	<!-- 가계부 통계 월별 수입지출 이전 합계 -->
	<select id="selectPrevAmount" resultType="int" parameterType="whiteMap">
		SELECT
			IFNULL(SUM(LR.MONEY), 0) AS amount
		FROM LEDGER_RCD LR
		INNER JOIN PURPOSE P
			ON P.PURPOSE_SEQ = LR.PURPOSE_SEQ
		INNER JOIN PURPOSE_DTL PD
			ON PD.PURPOSE_DTL_SEQ = LR.PURPOSE_DTL_SEQ
		WHERE LR.USER_SEQ = #{userSeq}		
		AND P.PURPOSE_TP_CD != 'LED003'   
		AND LR.RECORD_DATE  <![CDATA[ < ]]> #{startDate}
	</select>
	
	<!-- 가계부 통계 월별 수입지출 -->
	<select id="selectLedgerMonthIEStats" resultType="whiteMap" parameterType="java.util.List">	
		<foreach collection="list" item="item" separator="UNION ALL" >		
			SELECT
				#{item.startDate} 		AS startDate
				,A.PURPOSE_TP_CD		AS purposeTpCd
				,SUM(A.MONEY) 			AS money
			FROM 
			(
				SELECT				
					P.PURPOSE_TP_CD  	
					,SUM(LR.MONEY) 		AS money
				FROM LEDGER_RCD LR
				INNER JOIN PURPOSE P
					ON P.PURPOSE_SEQ = LR.PURPOSE_SEQ
		    	INNER JOIN PURPOSE_DTL PD
		      		ON PD.PURPOSE_DTL_SEQ = LR.PURPOSE_DTL_SEQ			
		    	WHERE LR.USER_SEQ = #{item.userSeq}	
		    	AND LR.STATS_YN = 'Y'	    	
		    	AND P.PURPOSE_TP_CD != 'LED003'   
				AND LR.RECORD_DATE   <![CDATA[ >= ]]>  #{item.startDate}
				AND LR.RECORD_DATE   <![CDATA[ <= ]]>  #{item.endDate}
				GROUP BY P.PURPOSE_TP_CD			
				UNION ALL			
				SELECT 
					'LED001' 			AS PURPOSE_TP_CD
					,0 					AS MONEY				
				UNION ALL			
		      	SELECT 
		      		'LED002' 			AS PURPOSE_TP_CD
					,0 					AS MONEY
			) AS A
			GROUP BY PURPOSE_TP_CD
		</foreach>
	</select>
	
	<!-- 가계부 통계 월 목적별 수입지출 -->
	<select id="selectLedgerMonthPurStats" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			P.PURPOSE_NM       	AS purposeNm
			,P.PURPOSE_SEQ          AS purposeSeq
			,ABS(SUM(LR.MONEY)) AS money		
		FROM LEDGER_RCD LR
		INNER JOIN PURPOSE P
			ON P.PURPOSE_SEQ = LR.PURPOSE_SEQ
		INNER JOIN PURPOSE_DTL PD
			ON PD.PURPOSE_DTL_SEQ = LR.PURPOSE_DTL_SEQ	
		WHERE LR.USER_SEQ = #{userSeq}
		AND LR.RECORD_DATE   <![CDATA[ >= ]]> #{startDate}
		AND LR.RECORD_DATE   <![CDATA[ <= ]]> #{endDate}
		AND LR.STATS_YN = 'Y'
		AND P.PURPOSE_TP_CD = #{purposeTpCd}
		GROUP BY LR.PURPOSE_SEQ, P.PURPOSE_SEQ
		ORDER BY LR.MONEY DESC
	</select>
	
	<!-- 가계부 통계 월 목적별 수입지출 -->
	<select id="selectLedgerMonthPurDtlStats" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			PD.PURPOSE_DTL_NM       AS purposeDtlNm			
			,ABS(SUM(LR.MONEY)) AS money		
		FROM LEDGER_RCD LR		
		INNER JOIN PURPOSE_DTL PD
			ON PD.PURPOSE_DTL_SEQ = LR.PURPOSE_DTL_SEQ	
		WHERE LR.USER_SEQ = #{userSeq}
		AND LR.PURPOSE_SEQ = #{purposeSeq}
		AND LR.RECORD_DATE   <![CDATA[ >= ]]> #{startDate}
		AND LR.RECORD_DATE   <![CDATA[ <= ]]> #{endDate}
		AND LR.STATS_YN = 'Y'
		GROUP BY PD.PURPOSE_DTL_NM
		ORDER BY LR.MONEY DESC
	</select>
	
	

</mapper>
