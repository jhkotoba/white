<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="ledgerMapper">

	<!-- 해당 유저 목적 리스트 조회 -->
	<select id="selectPurList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			pur_seq AS purSeq,
	  		pur_order AS purOrder,
	 		purpose AS purpose,
	 		pur_type AS purType
		FROM purpose
		WHERE USER_SEQ = #{userSeq}
		ORDER BY pur_order
	</select>
	
	<!-- 해당 유저 상세목적 리스트 조회 -->
	<select id="selectPurDtlList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			pur_dtl_seq AS purDtlSeq,
			pur_seq AS purSeq,
			pur_dtl_order AS purDtlOrder,
			pur_detail AS purDetail
		FROM purpose_detail
		WHERE USER_SEQ = #{userSeq}
		ORDER BY pur_dtl_order	
	</select>
	
	<!-- 해당 유저 목적 반영하기전 목적 시퀀스 검증 -->
	<select id="selectVerifyPurSeqStrList" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1)	FROM purpose
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND pur_seq IN (${verifyPurSeqList})
	</select>
	
	<!-- 거래내역에 목적이 사용되는지 확인 -->
	<select id="selectIsUsedPurposeRec" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM money_record_re
		WHERE pur_seq IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purSeq}
		</foreach>
	</select>
	
	<!-- 목적 삭제시 상세목적에 부모로써 사용되는지 확인 -->
	<select id="selectIsUsedPurposePurDtl" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM purpose_detail
		WHERE pur_seq IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purSeq}
		</foreach>
	</select>
	
	<!-- 목적 list 삭제 -->
	<delete id="deletePurList" parameterType="java.util.List">
		DELETE FROM purpose
		WHERE pur_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purSeq}
		</foreach>
	</delete>
	
	<!-- 목적 리스트 insert -->
	<insert id="insertPurList" parameterType="java.util.List">
		INSERT INTO purpose(		
			USER_SEQ,	
			pur_order,
			purpose,
			pur_type
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.userSeq},
			#{item.purOrder},
			#{item.purpose},
			#{item.purType}
		</foreach>	
	</insert>
	
	<!-- 목적 list 수정 -->
	<update id="updatePurList" parameterType="java.util.List">		
		UPDATE purpose
		SET pur_order = 
		CASE		
		<foreach collection="list" item="item">
			WHEN pur_seq = #{item.purSeq} THEN #{item.purOrder}
		</foreach>		
		END,	
		purpose = 
		CASE		
		<foreach collection="list" item="item">
			WHEN pur_seq = #{item.purSeq} THEN #{item.purpose}
		</foreach>		
		END,
		pur_type = 
		CASE		
		<foreach collection="list" item="item">
			WHEN pur_seq = #{item.purSeq} THEN #{item.purType}
		</foreach>		
		END
		WHERE pur_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purSeq}
		</foreach>		
	</update>
	
	
	<!-- 해당 유저 상세목적 반영하기전 상세목적 시퀀스 검증 -->
	<select id="selectVerifyPurDtlSeqStrList" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1)	FROM purpose_detail
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND pur_dtl_seq IN (${verifyPurDtlSeqList})
	</select>
	
	<!-- 해당 유저 상세목적반영하기전 목적 시퀀스 검증 -->
	<select id="selectVerifyPurSeq" resultType="int" parameterType="whiteMap">
		SELECT COUNT(1) FROM purpose
		WHERE USER_SEQ = #{userSeq}
		AND pur_seq = #{purSeq}
	</select>
	
	<!-- 거래내역에 상세목적이 사용되는지 확인 -->
	<select id="selectIsUsedPurDtlRec" resultType="int" parameterType="java.util.List">
		SELECT COUNT(1) FROM money_record_re
		WHERE pur_dtl_seq IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purDtlSeq}
		</foreach>
	</select>
	
	<!-- 상세목적 list 삭제 -->
	<delete id="deletePurDtlList" parameterType="java.util.List">
		DELETE FROM purpose_detail
		WHERE pur_dtl_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purDtlSeq}
		</foreach>
	</delete>
	
	<!-- 상세목적 list 수정 -->
	<update id="updatePurDtlList" parameterType="java.util.List">		
		UPDATE purpose_detail
		SET	pur_dtl_order = 
		CASE		
		<foreach collection="list" item="item">
			WHEN pur_dtl_seq = #{item.purDtlSeq} THEN #{item.purDtlOrder}
		</foreach>		
		END,	
		pur_detail = 
		CASE		
		<foreach collection="list" item="item">
			WHEN pur_dtl_seq = #{item.purDtlSeq} THEN #{item.purDetail}
		</foreach>		
		END
		WHERE pur_dtl_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.purDtlSeq}
		</foreach>
	</update>
	
	<!-- 상세목적 리스트 insert -->
	<insert id="insertPurDtlList" parameterType="java.util.List">
		INSERT INTO purpose_detail(		
			pur_seq,	
			USER_SEQ,	
			pur_dtl_order,
			pur_detail
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.purSeq}, 
			#{item.userSeq}, 
			#{item.purDtlOrder},
			#{item.purDetail}
		</foreach>	
	</insert>
	
	<!-- 은행 조회 -->
	<select id="selectMeansList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			MEANS_SEQ AS meansSeq,
			MEANS_NM AS meansNm,
			MEANS_DTL_NM AS meansDtlNm,
			MEANS_INFO AS meansInfo,
			MEANS_USE_YN AS meansUseYn,
			MEANS_ORDER AS meansOrder,
			MEANS_REMARK AS meansRemark
		FROM MEANS
		WHERE USER_SEQ = #{userSeq}		
		ORDER BY MEANS_ORDER ASC
	</select>
	
	<!-- 해당 유저 은행 반영하기전 상세목적 시퀀스 검증 -->
	<select id="selectVerifyMeansSeqStrList" resultType="int" parameterType="java.util.List">
		/* ledgerMapper|selectVerifyMeansSeqStrList */
		SELECT COUNT(1)	FROM MEANS
		WHERE USER_SEQ <![CDATA[ <> ]]> #{userSeq}
		AND MEANS_SEQ IN (${verifyMeansSeqList})
	</select>
	
	<!-- 사용목적 사용되는지 확인 -->
	<select id="selectIsUsedMeansRec" resultType="int" parameterType="java.util.List">
		/* ledgerMapper|selectIsUsedMeansRec */
		SELECT COUNT(1) FROM money_record_re
		WHERE MEANS_SEQ IN
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</select>
	
	<!-- 사용목적 리스트 insert -->
	<insert id="insertMeansList" parameterType="java.util.List">
		/* ledgerMapper|insertMeansList */
		INSERT INTO MEANS(		
			USER_SEQ,
			MEANS_NM,
			MEANS_DTL_NM,
			MEANS_INFO,
			MEANS_USE_YN,
			MEANS_ORDER,
			MEANS_REMARK
		)VALUES
		<foreach collection="list" item="item" index="index" separator="),(" open="(" close=")">
			#{item.userSeq},
			#{item.meansNm},
			#{item.meansDtlNm},
			#{item.meansInfo},
			#{item.meansUseYn},
			(SELECT MAX(B.MEANS_ORDER)+1 FROM MEANS B WHERE B.USER_SEQ = #{item.userSeq}),			
			#{item.meansRemark}	
		</foreach>	
	</insert>
	
	<!-- 은행 list 수정 -->
	<update id="updateMeansList" parameterType="java.util.List">		
		UPDATE MEANS
		SET MEANS_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansNm}
		</foreach>		
		END,
		MEANS_DTL_NM = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansDtlNm}
		</foreach>		
		END,
		MEANS_INFO = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansInfo}
		</foreach>		
		END,
		MEANS_USE_YN = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansUseYn}
		</foreach>
		END,
		MEANS_ORDER = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansOrder}
		</foreach>
		END,
		MEANS_REMARK = 
		CASE		
		<foreach collection="list" item="item">
			WHEN MEANS_SEQ = #{item.meansSeq} THEN #{item.meansRemark}
		</foreach>
		END
		WHERE MEANS_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</update>
	
	<!-- 은행 list 삭제 -->
	<delete id="deleteMeansList" parameterType="java.util.List">
		DELETE FROM MEANS
		WHERE MEANS_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.meansSeq}
		</foreach>
	</delete>
	
	<!-- 가게부 기입 list insert -->
	<insert id="insertRecordList" parameterType="java.util.List">
		INSERT INTO money_record_re(		
			USER_SEQ,	
			record_date,
			position,	
			content,	
			pur_seq,
			pur_dtl_seq,
			MEANS_SEQ,
			move_seq,
			money,
			stats_yn,
			edit_date,
			reg_date
		)VALUES
		<foreach collection="list" item="item" separator="),(" open="(" close=")">
			#{item.userSeq}, 
			#{item.recordDate},
			#{item.position},
			#{item.content}, 
			#{item.purSeq},	
			#{item.purDtlSeq},
			#{item.meansSeq}, 
			#{item.moveSeq},						 
			#{item.money},	
			#{item.statsYn},
			now(),	
			now()
		</foreach>	
	</insert>	
	
	<!-- 금전기록 해당날짜 이전 각각(현금, 은행등등) 금액 합산 조회 -->
	<select id="selectPastCalLedger" resultType="whiteMap" parameterType="java.util.List">
		SELECT
		<foreach collection="list" item="item" separator=",">
			(
			  SELECT 
			    IFNULL(
				    SUM( 
				      CASE
				      WHEN MEANS_SEQ = #{item.meansSeq} THEN money
				      WHEN move_seq = #{item.meansSeq} THEN ABS(money)
				      END
				    )
				  ,0)
			  FROM money_record_re
			  WHERE USER_SEQ = #{item.userSeq} 
			  AND record_date <![CDATA[ < ]]>  #{item.startDate}
			)AS ${item.meansNo}	
		</foreach>		
	</select>
	
	<!-- 금전기록 리스트 조회  -->
	<select id="selectLedgerList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			rec.record_seq AS recordSeq
			,DATE_FORMAT(rec.record_date,'%Y-%m-%d %H:%i') AS recordDate
			,IFNULL(rec.position, '') AS position
			,rec.content
			,rec.pur_seq AS purSeq
			,pur.pur_type AS purType
			,rec.pur_dtl_seq AS purDtlSeq
			,rec.MEANS_SEQ AS meansSeq
			,rec.move_seq AS moveSeq
			,rec.money
			,rec.stats_yn AS statsYn
			,pur.purpose	AS purpose
			,purDtl.pur_detail AS purDetail
			,M.MEANS_NM	AS meansNm
			,M.MEANS_DTL_NM	AS meansDtlNm
			,M.MEANS_INFO AS meansInfo
			,IFNULL(M.MEANS_USE_YN,'X') AS meansUseYn
		FROM money_record_re rec
		LEFT OUTER JOIN purpose pur
		ON rec.pur_seq = pur.pur_seq
		LEFT OUTER JOIN purpose_detail purDtl
		ON rec.pur_dtl_seq = purDtl.pur_dtl_seq
		LEFT OUTER JOIN MEANS M
    	ON rec.MEANS_SEQ = M.MEANS_SEQ
		WHERE rec.USER_SEQ = #{userSeq}
		AND rec.record_date <![CDATA[ >= ]]> CONCAT(#{startDate}, ' 00:00:00')
		AND rec.record_date <![CDATA[ <= ]]> CONCAT(#{endDate}, ' 23:59:59')
		ORDER BY rec.record_date ASC,  rec.record_seq ASC
	</select>
	
	
	<!-- 금전기록 해당날짜 이전 각각(현금, 은행등등) 금액 합산 조회 -->
	<select id="selectPastCalLedgerOLD" resultType="whiteMap" parameterType="java.util.List">
		SELECT
		<foreach collection="list" item="item" separator=",">
			(
			  SELECT 
			    IFNULL(
				    SUM( 
				      CASE
				      WHEN MEANS_SEQ = #{item.meansSeq} THEN money
				      WHEN move_seq = #{item.meansSeq} THEN ABS(money)
				      END
				    )
				  ,0)
			  FROM money_record_re
			  WHERE USER_SEQ = #{item.userSeq} 
			  AND record_date <![CDATA[ < ]]>  #{item.startDate}
			)AS ${item.meansNm}	
		</foreach>		
	</select>	
	
	<!-- 금전기록 리스트 조회  -->
	<select id="selectRecordList" resultType="whiteMap" parameterType="whiteMap">
		SELECT			
			rec.record_seq AS recordSeq
			,DATE_FORMAT(rec.record_date,'%Y-%m-%d %H:%i') AS recordDate
			,IFNULL(rec.position, '') AS position
			,rec.content
			,rec.pur_seq AS purSeq
			,pur.pur_type AS purType
			,IFNULL(rec.pur_dtl_seq, '') AS purDtlSeq
			,rec.MEANS_SEQ AS meansSeq
			,IFNULL(rec.move_seq, '') AS moveSeq
			,rec.money
			,rec.stats_yn AS statsYn
			,IFNULL(pur.purpose, 'move')	AS purpose
			,IFNULL(purDtl.pur_detail,'') AS purDetail
			,IFNULL(M.MEANS_NM, 'cash')	AS meansNm
			,IFNULL(M.MEANS_INFO, 'cash')	AS meansInfo
			,IFNULL(M.MEANS_USE_YN,'X') AS meansUseYn
			<if test="searchType == 'recent'">
			,DATE_FORMAT(rec.edit_date,'%Y-%m-%d %H:%i:%d') AS editDate
			,DATE_FORMAT(rec.reg_date,'%Y-%m-%d %H:%i:%d') AS regDate
			</if>
		FROM money_record_re rec
		LEFT OUTER JOIN purpose pur
		ON rec.pur_seq = pur.pur_seq
		LEFT OUTER JOIN purpose_detail purDtl
		ON rec.pur_dtl_seq = purDtl.pur_dtl_seq
		LEFT OUTER JOIN MEANS M
    	ON rec.MEANS_SEQ = M.MEANS_SEQ
		WHERE rec.USER_SEQ = #{userSeq}
		<choose>
		<when test="searchType == 'recent'">
		AND rec.reg_date <![CDATA[ >= ]]> DATE_ADD(NOW(), INTERVAL -${schdTime} HOUR)
		AND rec.reg_date <![CDATA[ <= ]]> NOW()
		ORDER BY rec.edit_date DESC,  rec.record_seq DESC
		</when>
		<otherwise>
		AND rec.record_date <![CDATA[ >= ]]> #{startDate}
		AND rec.record_date <![CDATA[ <= ]]> #{endDate}
		ORDER BY rec.record_date ASC,  rec.record_seq ASC
		</otherwise>
		</choose>
	</select>
	
	<!-- 금전기록 list 수정 -->
	<update id="updateRecordList" parameterType="java.util.List">		
		UPDATE money_record_re
		SET record_date = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.recordDate}
		</foreach>		
		END,	
		content = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.content}
		</foreach>		
		END,	
		position = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.position}
		</foreach>		
		END,		
		pur_seq = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.purSeq}
		</foreach>		
		END,		
		pur_dtl_seq = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.purDtlSeq}		
		</foreach>		
		END,
		MEANS_SEQ = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.meansSeq}					
		</foreach>		
		END,		
		move_seq = 
		CASE		
		<foreach collection="list" item="item">
			<choose>				
				<when test="item.moveSeq == ''">
					WHEN record_seq = #{item.recordSeq} THEN NULL
				</when>				
				<otherwise>
					WHEN record_seq = #{item.recordSeq} THEN #{item.moveSeq}
				</otherwise>
			</choose>			
		</foreach>		
		END,		
		money = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.money}
		</foreach>		
		END,
		stats_yn = 
		CASE		
		<foreach collection="list" item="item">
			WHEN record_seq = #{item.recordSeq} THEN #{item.statsYn}
		</foreach>		
		END,
		edit_date =	now()
		WHERE record_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.recordSeq}
		</foreach>
		AND USER_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.userSeq}
		</foreach>
	</update>
	
	<!-- 금전기록 list 삭제 -->
	<delete id="deleteRecordList" parameterType="java.util.List">
		DELETE FROM money_record_re
		WHERE record_seq IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.recordSeq}
		</foreach>
		AND USER_SEQ IN 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.userSeq}
		</foreach>
	</delete>
	
	<!-- 가계부 첫 시작날짜 조회 -->
	<select id="selectFirstRecordDate" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			DATE_FORMAT(mr.record_date,'%Y-%m-%d') AS firstDate
		FROM money_record_re mr		
		WHERE mr.USER_SEQ = #{userSeq}
	    ORDER BY mr.record_date ASC
	    Limit 1
	</select>	
	
	<!-- 가계부 통계 월별 수입지출 이전 합계 -->
	<select id="selectPrevAmount" resultType="int" parameterType="whiteMap">
		SELECT
			IFNULL(SUM(mr.money), 0) AS amount
		FROM money_record_re mr
		INNER JOIN purpose p
			ON p.pur_seq = mr.pur_seq
		INNER JOIN purpose_detail pd
			ON pd.pur_dtl_seq = mr.pur_dtl_seq
		WHERE mr.USER_SEQ = #{userSeq}		
		AND p.pur_type != 'LED003'   
		AND mr.record_date  <![CDATA[ < ]]> #{startDate}
	</select>
	
	<!-- 가계부 통계 월별 수입지출 -->
	<select id="selectLedgerMonthIEStats" resultType="whiteMap" parameterType="java.util.List">	
		<foreach collection="list" item="item" separator="UNION ALL" >		
			SELECT
				#{item.startDate} 		AS startDate
				,A.purTypeCd			AS purTypeCd
				,SUM(A.money) 			AS money
			FROM 
			(
				SELECT				
					p.pur_type  		AS purTypeCd
					,SUM(mr.money) 		AS money
				FROM money_record_re mr
				INNER JOIN purpose p
					ON p.pur_seq = mr.pur_seq
		    	INNER JOIN purpose_detail pd
		      		ON pd.pur_dtl_seq = mr.pur_dtl_seq			
		    	WHERE mr.USER_SEQ = #{item.userSeq}	
		    	AND mr.stats_yn = 'Y'	    	
		    	AND p.pur_type != 'LED003'   
				AND mr.record_date   <![CDATA[ >= ]]>  #{item.startDate}
				AND mr.record_date   <![CDATA[ <= ]]>  #{item.endDate}
				GROUP BY p.pur_type			
				UNION ALL			
				SELECT 
					'LED001' 			AS purTypeCd
					,0 					AS money				
				UNION ALL			
		      	SELECT 
		      		'LED002' 			AS purTypeCd
					,0 					AS money
			) AS A
			GROUP BY purTypeCd
		</foreach>
	</select>
	
	<!-- 가계부 통계 월 목적별 수입지출 -->
	<select id="selectLedgerMonthPurStats" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			p.purpose         	AS purpose
			,p.pur_seq          AS purSeq
			,ABS(SUM(mr.money)) AS money		
		FROM money_record_re mr
		INNER JOIN purpose p
			ON p.pur_seq = mr.pur_seq
		INNER JOIN purpose_detail pd
			ON pd.pur_dtl_seq = mr.pur_dtl_seq	
		WHERE mr.USER_SEQ = #{userSeq}
		AND mr.record_date   <![CDATA[ >= ]]> #{startDate}
		AND mr.record_date   <![CDATA[ <= ]]> #{endDate}
		AND mr.stats_yn = 'Y'
		AND p.pur_type = #{purType}
		GROUP BY mr.pur_seq, p.pur_seq
		ORDER BY money DESC
	</select>
	
	<!-- 가계부 통계 월 목적별 수입지출 -->
	<select id="selectLedgerMonthPurDtlStats" resultType="whiteMap" parameterType="whiteMap">
		SELECT
			pd.pur_detail       AS purDetail			
			,ABS(SUM(mr.money)) AS money		
		FROM money_record_re mr		
		INNER JOIN purpose_detail pd
			ON pd.pur_dtl_seq = mr.pur_dtl_seq	
		WHERE mr.USER_SEQ = #{userSeq}
		AND mr.pur_seq = #{purSeq}
		AND mr.record_date   <![CDATA[ >= ]]> #{startDate}
		AND mr.record_date   <![CDATA[ <= ]]> #{endDate}
		AND mr.stats_yn = 'Y'
		GROUP BY pd.pur_detail
		ORDER BY money DESC
	</select>
	
	

</mapper>
